name: ci/cd (feature)

on:
  push:
    branches:
      - 'feature/*'

jobs:
  build:
    runs-on: ubuntu-latest
    env: 
      DOCKERHUB_USERNAME: ${{ vars.DOCKERHUB_USERNAME }}
      DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
      GH_PASSWORD: ${{ secrets.GH_PASSWORD }} # github password
      GH_USERNAME: ${{ vars.GH_USERNAME }} # github username

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 20
    
    - name: Github connection config
      run: |
        git config --global user.email "feature@example.com"
        git config --global user.name "Github Action"

    # - name: Version increment
    #   run: npm --no-git-tag-version version patch

    - name: Get current app version
      run: echo "CURRENT_VERSION=$(node -p 'require("./package.json").version')" >> $GITHUB_ENV

    # - name: Login to Docker Hub
    #   uses: docker/login-action@v3
    #   with:
    #     username: ${{ env.DOCKERHUB_USERNAME }}
    #     password: ${{ env.DOCKERHUB_PASSWORD }}

    # - name: Build docker image and push
    #   uses: docker/build-push-action@v5
    #   with:
    #     push: true
    #     tags: ${{ env.DOCKERHUB_USERNAME }}/webapp-test:${{ env.CURRENT_VERSION }}-test
    
    # - name: Commit version update
    #   run: |
    #     git remote set-url origin "https://${{ env.GH_USERNAME }}:${{ env.GH_PASSWORD }}@github.com/Konstanteene/main_playground.git"
    #     git add .
    #     git commit -m "ci: version bump"
    #     git push origin feature
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_EC2_SSH_KEY: ${{ secrets.AWS_EC2_SSH_KEY }}
      AWS_EC2_HOST: ${{ secrets.AWS_EC2_HOST }}
      AWS_EC2_USER_NAME: ${{ secrets.AWS_EC2_USER_NAME }} 
    steps: 
      - name: set up ssh key
        run: echo ${{ env.AWS_EC2_SSH_KEY }} > ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa

      - name: copy files to ec2
        run: |
          scp ./scripts/deploy-to-ec2.sh ${{ env.AWS_EC2_USER_NAME }}@${{ env.AWS_EC2_HOST }}:/home/ubuntu
          scp docker-compose.yml ${{ env.AWS_EC2_USER_NAME }}@${{ env.AWS_EC2_HOST }}:/home/ubuntu

      - name: ssh to ec2 and run docker-compose
        run: ssh -i ~/.ssh/id_rsa ${{ env.AWS_EC2_USER_NAME }}@${{ env.AWS_EC2_HOST }} bash ./deploy-to-ec2.sh
